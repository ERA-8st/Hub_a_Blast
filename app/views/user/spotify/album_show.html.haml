.container
	-# アーティストリンク>アルバム名
	.row
		%h1.head_title
			= link_to "#{@album.artists.first.name}", user_spotify_artist_show_path(@album.artists.first.id)
			=  " > #{@album.name.truncate(24)}"
	.row
		.col-lg-6.col-md-6.col-xs-6
			- if @album.images.any?
				- image = @album.images[1]
				= image_tag(image["url"], "data-adaptive-background" => '1')
			- else
				= image_tag("default.jpg")
			%br
			-# 評価機能
			- if user_signed_in?
				.album_rating
					= @album.name.truncate(24)
					= render "user/spotify/album_rating", album_rating: @album_rating, new_album_rating: @new_album_rating, album: @album
			%table.table
				- @songs.each do |song|
					%tr
						%td
							= link_to user_spotify_song_show_path(song.id) do
								= song.name
						%td
							-# レビュー平均
							%p{{class: "star-rate-#{song.id}"}} 
								:javascript
									$(".star-rate-#{song.id}").raty({
										size: 36,
										starOff: "#{asset_path('star-off.png')}",
										starOn: "#{asset_path('star-on.png')}",
										starHalf: "#{asset_path('star-half.png')}",
										half: true,
										readOnly: true,
										score: "#{SongRating.where(song_id: song.id).average(:rate).to_f.round(1)}",
									});
						%td= "(#{SongRating.where(song_id: song.id).count})"
		.col-lg-1.col-md-1.col-xs-1
		.col-lg-5.col-md-5.col-xs-5
			-# コメント機能
			= form_with model: @album_comment,  url: user_album_comments_path, local: true do |f|
				= f.text_area :comment, rows:"2",placeholder: "コメント"
				= f.hidden_field :album_id , :value => @album.id
				= f.submit "コメント", class: "btn btn-sm btn-base-1 mt-20 pull-right"
			%table.table
				- @album_comments.each do |comment|
					%tr
						%td= comment.user.user_name
						-# コメント更新用テキストボックス
						-if @comment == comment
							%td
								= form_with model: @comment, url: user_album_comment_path(comment), local: true do |f|
									= f.text_area :comment, rows:"2"
									%br
									= f.submit "更新する", class: "btn btn-sm btn-base-1 mt-20 pull-right"
						-else
							%td= comment.comment
						%td= comment.created_at.strftime('%Y/%m/%d')
						-# 編集/削除用プルダウン
						- if comment.user == current_user
							%td.fa.fa-bars.comment_pulldown
								%ul.comment_edit
									%li
										= link_to user_spotify_album_show_path(@album.id, comment_id: comment.id) do
											%i.fa.fa-pencil
									%li
										= link_to user_album_comment_path(comment), method: :delete do
											%i.fa.fa-trash-o
						- else
							%td
			%p= "#{@album_comments.count}コメント" 